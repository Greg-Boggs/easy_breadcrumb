<?php/** * @file * Module's blocks */require_once 'EasyBreadcrumbConstants.inc';/** * Obtains the 'easy_breadcrumb' block * * @return Assoc *   resulting renderizable array * */function _easy_breadcrumb_block() {  $default_class = 'easy-breadcrumb_segment';  $class_arr = array($default_class, 'easy-breadcrumb_segment-home');  $home_text = t('Home');  $breadcrumb = array();  $breadcrumb[] = l($home_text, NULL,    array(      'attributes' => array('class' => $class_arr),    )  );  // Don't waste resources if the current page is the home.  if (!drupal_is_front_page()) {    $uppercase_mode = variable_get(      EasyBreadcrumbConstants::DB_VAR_SEGMENTS_CAPITALIZE_MODE, 'ucwords');    $url = drupal_get_path_alias();    $url_arr = explode('/', $url);    $segment_url_arr = array();    $n = count($url_arr);    for ($c = 1, $i = 0; $c < $n; ++$c, ++$i) {      $item = $url_arr[$i];      $segment_url_arr[] = $item;      $segment_url = implode('/', $segment_url_arr);      $segment_title = _easy_breadcrumb_normalize_url_segment_text($item,        $uppercase_mode);      $class_arr[1] = 'easy-breadcrumb_segment-' . $c;      $breadcrumb[$c] = l($segment_title, $segment_url, array(        'attributes' => array('class' => $class_arr),)      );    }    $title_visible = variable_get(EasyBreadcrumbConstants::DB_VAR_TITLE_VISIBLE,      TRUE);    if ($title_visible) {      $class_arr[1] = 'easy-breadcrumb_segment-title';      $use_page_title_when_available = variable_get(        EasyBreadcrumbConstants::DB_VAR_PAGE_TITLE_WHEN_AVAILABLE, TRUE);      if($use_page_title_when_available) {        $title = drupal_get_title();      }      // If the current page has not title, then extract it from the url.      if (!isset($title) || $title === '') {        $title = $url_arr[$n - 1];        $title = _easy_breadcrumb_normalize_url_segment_text($title,          $uppercase_mode);      }      $breadcrumb[$n] = l($title, $url, array(        'attributes' => array('class' => $class_arr))      );    }  }  $separator = variable_get(EasyBreadcrumbConstants::DB_VAR_SEGMENTS_SEPARATOR,    '>>');  $build = array();  $build['easy_breadcrumb'] = array(    '#theme' => 'easy_breadcrumb',    '#breadcrumb' => $breadcrumb,    '#separator' => $separator,  );  return $build;}/** * Normalizes an URL segment's title. e.g., transforms "about-us" into * "About Us" or "About us" according menu's settings. * * @param string $segment *   Segment's title to be normalized * @param string $uppercase_mode *   Specifies the uppercase transformation to be applied to the segment's *   title, if so. * * @return string *   normalized segment title * */function _easy_breadcrumb_normalize_url_segment_text($segment,$uppercase_mode = 'ucwords') {  $normalized_segment = str_replace('-', ' ', $segment);  switch ($uppercase_mode) {    case 'ucwords': // Converts 'once a time' to 'Once a Time'.      $segments_arr = explode(' ', $normalized_segment);      // Ignored words.      $capitalize_ignored_words_arr = variable_get(        EasyBreadcrumbConstants::DB_VAR_SEGMENTS_CAPITALIZE_IGNORED_WORDS, '');      // Converts the not-ignored words of the segment      $segments_arr[0] = ucfirst($segments_arr[0]);      for($i=1, $n=count($segments_arr); $i<$n; ++$i) {        if(!isset($capitalize_ignored_words_arr[$segments_arr[$i]])) {          $segments_arr[$i] = ucfirst($segments_arr[$i]);        }      }      $normalized_segment = join(' ', $segments_arr);      break;    case 'ucfirst': // Converts 'once a time' to 'Once a time'.      $normalized_segment = ucfirst($normalized_segment);      break;    default:  }  return $normalized_segment;}